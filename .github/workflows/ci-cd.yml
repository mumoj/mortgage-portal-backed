name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  actions: read
  checks: write        # Required for test reporter
  pull-requests: write
  security-events: write # Required for security scan
  packages: write        # Required for container registry

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Checkstyle
        working-directory: ./backend
        run: mvn checkstyle:check

      - name: Check code formatting
        working-directory: ./backend
        run: mvn validate

  test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint-and-format

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests
        working-directory: ./backend
        env:
          SPRING_PROFILES_ACTIVE: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: test
          DB_PASSWORD: test
        run: mvn clean verify

      - name: Generate test report
        uses: dorny/test-reporter@v1.9.1
        if: success() || failure()
        with:
          name: Maven Tests
          path: backend/target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella

      - name: Generate coverage badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: backend/target/site/jacoco/jacoco.csv

      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: .github/badges/jacoco.svg

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build application
        working-directory: ./backend
        run: mvn clean package -DskipTests

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          skip-version-check: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      # Build image locally for scanning
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          load: true  # Load image into local Docker daemon
          tags: mortgage-portal-backend:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Run Trivy scan on the local image
      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mortgage-portal-backend:scan'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          skip-version-check: true

      - name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

      # Build and push to registry (only if not a PR)
      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Clean up local image
      - name: Clean up local image
        if: always()
        run: docker rmi mortgage-portal-backend:scan || true

  contract-test:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g newman
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Start services
        run: docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 120 bash -c '
          while ! curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; do
              echo "Still waiting for application..."
              sleep 5
          done'
          echo "Application is ready!"
          
          # Additional wait to ensure database is fully initialized
          sleep 10

      # NEW: Obtain JWT tokens for testing
      - name: Get JWT tokens for testing
        run: |
          # Get APPLICANT token
          echo "Getting APPLICANT token..."
          APPLICANT_RESPONSE=$(curl -s -X POST http://localhost:8080/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"applicant1","password":"password"}')
          
          APPLICANT_TOKEN=$(echo "$APPLICANT_RESPONSE" | jq -r '.token // empty')
          
          if [ -z "$APPLICANT_TOKEN" ] || [ "$APPLICANT_TOKEN" = "null" ]; then
            echo "❌ Failed to get APPLICANT token. Response: $APPLICANT_RESPONSE"
            exit 1
          fi
          
          echo "✅ Successfully obtained APPLICANT token"
          
          # Get OFFICER token  
          echo "Getting OFFICER token..."
          OFFICER_RESPONSE=$(curl -s -X POST http://localhost:8080/api/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"officer1","password":"password"}')
          
          OFFICER_TOKEN=$(echo "$OFFICER_RESPONSE" | jq -r '.token // empty')
          
          if [ -z "$OFFICER_TOKEN" ] || [ "$OFFICER_TOKEN" = "null" ]; then
            echo "❌ Failed to get OFFICER token. Response: $OFFICER_RESPONSE"
            exit 1
          fi
          
          echo "✅ Successfully obtained OFFICER token"
          
          # Export tokens as environment variables
          echo "APPLICANT_JWT_TOKEN=$APPLICANT_TOKEN" >> $GITHUB_ENV
          echo "OFFICER_JWT_TOKEN=$OFFICER_TOKEN" >> $GITHUB_ENV

      - name: Verify authentication
        run: |
          echo "Testing APPLICANT token..."
          if curl -f -H "Authorization: Bearer $APPLICANT_JWT_TOKEN" \
            http://localhost:8080/api/v1/applications > /dev/null 2>&1; then
            echo "✅ APPLICANT token is valid"
          else
            echo "❌ APPLICANT token verification failed"
            exit 1
          fi
          
          echo "Testing OFFICER token..."  
          if curl -f -H "Authorization: Bearer $OFFICER_JWT_TOKEN" \
            http://localhost:8080/api/v1/applications > /dev/null 2>&1; then
            echo "✅ OFFICER token is valid"
          else
            echo "❌ OFFICER token verification failed"
            exit 1
          fi

      - name: Run Postman collection with dynamic tokens
        run: |
          newman run postman/Mortgage-Portal-API.postman_collection.json \
            -e postman/Mortgage-Portal-Environment.postman_environment.json \
            --env-var "jwt_token=$APPLICANT_JWT_TOKEN" \
            --env-var "officer_jwt_token=$OFFICER_JWT_TOKEN" \
            --env-var "base_url=http://localhost:8080" \
            --reporters cli,junit,html \
            --reporter-junit-export newman-results.xml \
            --reporter-html-export newman-report.html \
            --delay-request 100 \
            --timeout-request 10000 \
            --insecure

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: newman-results
          path: |
            newman-results.xml
            newman-report.html

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Application Logs ==="
          docker-compose logs app | tail -50
          echo "=== Database Users ==="
          docker-compose exec -T postgres psql -U postgres -d mortgage_db -c "SELECT username, email, role, enabled FROM users;"

      - name: Stop services
        if: always()
        run: docker-compose down -v