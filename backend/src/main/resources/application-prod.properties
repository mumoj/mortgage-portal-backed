# Database - Production
spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT:5432}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.max-lifetime=1200000

# JPA - Production settings
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Logging - Production
logging.level.root=WARN
logging.level.com.bank.mortgage=INFO
logging.level.org.springframework.security=WARN
logging.pattern.console={"timestamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%level","logger":"%logger","thread":"%thread","message":"%msg","traceId":"%X{traceId:-}","spanId":"%X{spanId:-}","environment":"production"}%n

# Security - Strict for production
app.jwt.secret=${JWT_SECRET}
app.jwt.expiration=${JWT_EXPIRATION:3600000}

# Kafka - Production
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.producer.properties.security.protocol=${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
spring.kafka.producer.properties.sasl.mechanism=${KAFKA_SASL_MECHANISM:PLAIN}
spring.kafka.producer.properties.sasl.jaas.config=${KAFKA_SASL_JAAS_CONFIG:}
app.kafka.topic.applications=loan.applications

# Rate limiting - Strict for production
app.rate-limit.enabled=true
app.rate-limit.capacity=50
app.rate-limit.tokens=5
app.rate-limit.duration=PT1M

# CORS - Restricted for production
cors.allowed-origins=${CORS_ORIGINS}
cors.allowed-methods=GET,POST,PUT,PATCH,DELETE
cors.allowed-headers=Authorization,Content-Type,X-Requested-With
cors.allow-credentials=true

# AWS - Production
app.s3.bucket=${S3_BUCKET}
app.s3.region=${AWS_REGION}
aws.access-key-id=${AWS_ACCESS_KEY_ID}
aws.secret-access-key=${AWS_SECRET_ACCESS_KEY}

# Actuator - Limited for production
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=never
management.endpoint.info.enabled=true
management.endpoint.health.probes.enabled=true
management.endpoint.health.group.liveness.include=livenessState,diskSpace
management.endpoint.health.group.readiness.include=readinessState,db,kafka

# Performance - Production optimizations
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
spring.jpa.properties.hibernate.javax.cache.provider=org.ehcache.jsr107.EhcacheCachingProvider

# SSL/TLS - Production security
server.ssl.enabled=${SSL_ENABLED:false}
server.ssl.key-store=${SSL_KEYSTORE_PATH:}
server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD:}
server.ssl.key-store-type=PKCS12

# Error handling - Don't expose stack traces
server.error.include-stacktrace=never
server.error.include-message=never
server.error.include-binding-errors=never

# Connection pooling and timeouts
spring.kafka.producer.properties.request.timeout.ms=30000
spring.kafka.producer.properties.delivery.timeout.ms=60000
spring.kafka.producer.properties.max.block.ms=10000

# Monitoring and observability
management.tracing.sampling.probability=${TRACING_SAMPLE_RATE:0.1}
management.metrics.export.prometheus.enabled=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.slo.http.server.requests=50ms,100ms,200ms,400ms

# Graceful shutdown
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=20s